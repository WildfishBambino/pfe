variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  GIT_DEPTH: "0"

stages:
  - Test and Lint
  - SCA 
  - Quality Analysis

# --- Shared Variables ---
.snyk_auth: &snyk_auth
  before_script:
    - apt-get update && apt-get install -y curl
    - curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
    - apt-get install -y nodejs
    - npm install -g snyk
    - snyk config set api=$SNYK_TOKEN  # Non-interactive auth

# --- Snyk SCA ---
snyk-scanner:
  <<: *snyk_auth
  stage: SCA
  image: python:3.9
  variables:
    SNYK_TOKEN: $SNYK_TOKEN
  script:
    - pip install -r requirements.txt
    - snyk test --severity-threshold=high --file=requirements.txt
    - snyk test --sarif-file-output=snyk.sarif || true  # Prevent job failure
  artifacts:
    reports:
      sast: snyk.sarif
    paths:
      - snyk.sarif  # Explicit artifact path
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "prod"

# --- SonarCloud SAST ---
sonarcloud-check:
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  stage: Quality Analysis
  variables:
    SONAR_TOKEN: $SONAR_TOKEN
    SONAR_PROJECT_KEY: $SONAR_PROJECT_KEY
  script:
    - sonar-scanner
      -Dsonar.projectKey=$SONAR_PROJECT_KEY
      -Dsonar.organization=<YOUR_SONARCLOUD_ORG>
      -Dsonar.login=$SONAR_TOKEN
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "prod"

# --- Python Tests & Linting ---
Python Checks:
  image: docker:28.1.1
  services:
    - docker:28.1.1-dind
  before_script:
    - echo "$DOCKERHUB_TOKEN" | docker login --username $DOCKERHUB_USER --password-stdin
  stage: Test and Lint
  script:
    - docker compose run --rm app sh -c "python manage.py wait_for_db && python manage.py test"
    - docker compose run --rm app sh -c "flake8 --exclude=migrations --ignore=W292,E501" 
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "prod"

# --- Terraform Validation ---
Terraform Checks:
  image: docker:28.1.1
  services:
    - docker:28.1.1-dind
  before_script:
    - echo "$DOCKERHUB_TOKEN" | docker login --username $DOCKERHUB_USER --password-stdin
  stage: Test and Lint
  script: 
    - cd infra/
    - docker compose run --rm terraform -chdir=deploy/ init -backend=false
    - docker compose run --rm terraform -chdir=setup/ init -backend=false
    - docker compose run --rm terraform -chdir=setup/ validate
    - docker compose run --rm terraform -chdir=setup/ fmt -check
    - docker compose run --rm terraform -chdir=deploy/ validate
    - docker compose run --rm terraform -chdir=deploy/ fmt -check
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "prod"